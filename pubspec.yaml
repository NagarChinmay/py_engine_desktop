name: py_engine_desktop
description: "🐍 Flutter plugin for embedded Python runtime on desktop. Execute Python scripts, interactive REPL, pip package management. Cross-platform Windows/macOS/Linux support with isolated Python environment."
version: 1.0.0
homepage: https://github.com/NagarChinmay/py_engine_desktop
repository: https://github.com/NagarChinmay/py_engine_desktop
issue_tracker: https://github.com/NagarChinmay/py_engine_desktop/issues
documentation: https://github.com/NagarChinmay/py_engine_desktop#readme

# SEO-optimized topics for better discoverability
topics:
  - python
  - desktop
  - embedded
  - scripting
  - repl
  - automation
  - cross-platform
  - pip
  - runtime
  - interpreter
  - machine-learning
  - data-science
  - backend
  - integration
  - plugin

environment:
  sdk: ^3.8.1
  flutter: '>=3.3.0'

dependencies:
  flutter:
    sdk: flutter
  plugin_platform_interface: ^2.0.2
  archive: ^3.4.0
  path_provider: ^2.1.0
  path: ^1.8.3

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # This section identifies this Flutter project as a plugin project.
  # The 'pluginClass' specifies the class (in Java, Kotlin, Swift, Objective-C, etc.)
  # which should be registered in the plugin registry. This is required for
  # using method channels.
  # The Android 'package' specifies package in which the registered class is.
  # This is required for using method channels on Android.
  # The 'ffiPlugin' specifies that native code should be built and bundled.
  # This is required for using `dart:ffi`.
  # All these are used by the tooling to maintain consistency when
  # adding or updating assets for this project.
  plugin:
    platforms:
      linux:
        pluginClass: PyEngineDesktopPlugin
      macos:
        pluginClass: PyEngineDesktopPlugin
      windows:
        pluginClass: PyEngineDesktopPluginCApi

  # Python runtime assets
  assets:
    - assets/python-windows.zip
    - assets/python-macos.zip
    - assets/python-linux.zip
  #
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # To add custom fonts to your plugin package, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts in packages, see
  # https://flutter.dev/to/font-from-package
